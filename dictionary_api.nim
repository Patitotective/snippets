import std/[httpclient, json, strformat, strutils, os]

const getUrl = "https://api.dictionaryapi.dev/api/v2/entries/en/"
const words = [
  "aardvark", 
  "accurate", 
  "adorable", 
  "aerobic", 
  "aerospace", 
  "affiliates", 
  "airy", 
  "alone", 
  "ancient", 
  "anniversary", 
  "announcer", 
  "antique", 
  "applause", 
  "armchair", 
  "array", 
  "arteries", 
  "artichoke", 
  "assume", 
  "auditorium", 
  "avenue", 
  "awful", 
  "balloonist", 
  "barometer", 
  "basketball", 
  "bathing suit", 
  "knotted", 
  "know", 
  "laughable", 
  "lawyer", 
  "legislature", 
  "lettuce", 
  "lightning", 
  "little", 
  "loaf", 
  "longitude", 
  "loyalty", 
  "luminous", 
  "margarine", 
  "marsupial", 
  "mathematical", 
  "mathematicians", 
  "measurement", 
  "microscopic", 
  "mistake", 
  "monsoon", 
  "museum", 
  "navigation", 
  "nickel", 
  "night", 
  "nighttime", 
  "beach", 
  "because", 
  "belongings", 
  "beneficial", 
  "biceps", 
  "bilingual", 
  "billboard", 
  "biography", 
  "blindfolded", 
  "bookstore", 
  "bottom", 
  "breakfast", 
  "Buckingham Palace", 
  "building", 
  "businesses", 
  "campaign", 
  "capillaries", 
  "cartography", 
  "century", 
  "character", 
  "charcoal", 
  "civilizations", 
  "coiled", 
  "comic book", 
  "competence", 
  "nuclear energy", 
  "numerous", 
  "o'clock", 
  "observations", 
  "obtained", 
  "ogre", 
  "oilier", 
  "ointment", 
  "onion", 
  "organization", 
  "participate", 
  "peaceful", 
  "philosopher", 
  "photography", 
  "pictures", 
  "pillowcase", 
  "police officer", 
  "pollinate", 
  "populate", 
  "portfolio", 
  "pray", 
  "precedes", 
  "precious", 
  "prey", 
  "problem", 
  "consequence", 
  "course", 
  "crooner", 
  "cruelty", 
  "curly", 
  "cushion", 
  "daffodil", 
  "desert", 
  "develop", 
  "dirty", 
  "disappeared", 
  "doorknob", 
  "dormouse", 
  "downpour", 
  "downstairs", 
  "drawers", 
  "earliest", 
  "eggplant", 
  "electricity", 
  "employee", 
  "engineer", 
  "enjoyable", 
  "erupting", 
  "established", 
  "eucalyptus", 
  "pronunciation", 
  "pyramid", 
  "quail", 
  "quaint", 
  "quantity", 
  "quarrel", 
  "quart", 
  "raincoat", 
  "reasons", 
  "rebellion", 
  "recipe", 
  "refrigerator", 
  "relatively", 
  "reliable", 
  "representation", 
  "research", 
  "responsible", 
  "robbery", 
  "royalty", 
  "runes", 
  "salmon", 
  "sanctuary", 
  "satellite", 
  "scissors", 
  "scraggly", 
  "eventually", 
  "excavate", 
  "excavation", 
  "exciting", 
  "expedition", 
  "expensive", 
  "eyebrow", 
  "eyelashes", 
  "fence", 
  "firefighter", 
  "flamingo", 
  "forty", 
  "fossil fuels", 
  "fountains", 
  "fourteen", 
  "furnaces", 
  "gallon", 
  "gasoline", 
  "gelatin", 
  "general", 
  "genius", 
  "genuine", 
  "geography", 
  "geological", 
  "gloves", 
  "screws", 
  "scruff", 
  "scrutinize", 
  "skates", 
  "skeleton", 
  "skeptical", 
  "skirmish", 
  "sleigh", 
  "slippery", 
  "slumber party", 
  "societies", 
  "soloist", 
  "sphere", 
  "sponsored", 
  "sprinkling", 
  "squabble", 
  "squall", 
  "squash", 
  "steak", 
  "straggly", 
  "straighten", 
  "strategic", 
  "streams", 
  "strengthen", 
  "submarine", 
  "grateful", 
  "half", 
  "harmful", 
  "honored", 
  "hygiene", 
  "hymns", 
  "improve", 
  "information", 
  "inseparable", 
  "introduce", 
  "invented", 
  "investigate", 
  "irrigate", 
  "jealous", 
  "jeans", 
  "joyful", 
  "judge", 
  "Jupiter", 
  "justice", 
  "kitchen", 
  "knead", 
  "kneecap", 
  "knight", 
  "knocking", 
  "knot", 
  "suggestions", 
  "surfboard", 
  "swimming pool", 
  "talkative", 
  "taught", 
  "tennis racket", 
  "theater", 
  "thinking", 
  "thistle", 
  "throw", 
  "toilet paper", 
  "tournament", 
  "train station", 
  "transportation", 
  "trespass", 
  "truthful", 
  "unpredictable", 
  "vessel", 
  "video game", 
  "violin", 
  "vocabulary", 
  "voice", 
  "volunteer", 
  "voyage", 
  "wrist", 
]
const frontText = "Listen closely..."

var client = newHttpClient()
var output = ""#"Front\tBack\tDefinition\n"

try:
  for wordCount, word in words:
    var response: JsonNode
    try:
      let u = getUrl & word.strip()
      echo u
      response = client.getContent(u).parseJson()
    except Exception as e:
      echo e.msg
      if e.msg.startsWith("429"):
        echo wordCount, "\n", output  
        quit()
      discard

    var definitions: string
    if not response.isNil and response.kind == JArray and "meanings" in response[0]:
      let meanings = response[0]["meanings"]
      if meanings.kind == JArray:
        for m in meanings:
          if "partOfSpeech" in m:
            definitions.add &"({m[\"partOfSpeech\"].getStr})<br>"

          if "definitions" in m and m["definitions"].kind == JArray:
            var dCount = 0
            for d in m["definitions"].getElems:
              definitions.add &"{dCount + 1}. {d[\"definition\"].getStr}<br>"

              inc dCount

    output.add &"{frontText}\t{word}\t{definitions}\n"
    sleep(500)

finally:
  client.close()

writeFile("spelling_bee.csv", output)
